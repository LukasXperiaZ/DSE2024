services:

  mongo:
    image: mongo
    restart: unless-stopped
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false

  rabbitmq:
    image: rabbitmq:3-management
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672 # management ui guest:guest
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  beachcombservice:
    build:
      context: ./beachcomb-service
      dockerfile: Dockerfile-beachcomb
    container_name: "beachcombservice"
    ports:
      - 8000:8080
    depends_on:
        mongo:
            condition: service_started
        rabbitmq:
            condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      MONGO_URI: "mongodb://root:example@mongo:27017"

  controlservice:
    build:
      context: ./python-services
      dockerfile: Dockerfile-control
    container_name: "controlservice"
    ports:
      - 8002:8002
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      MONGO_URI: "mongodb://root:example@mongo:27017"

  inventoryservice:
    build:
      context: ./python-services
      dockerfile: Dockerfile-inventory
    container_name: "inventoryservice"
    ports:
      - 8001:8001
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      MONGO_URI: "mongodb://root:example@mongo:27017"
